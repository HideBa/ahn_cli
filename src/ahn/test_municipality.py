import unittest
from municipality import city_polygon
from shapely.geometry import Polygon
from geopandas import GeoDataFrame


class TestMunicipality(unittest.TestCase):
    def test_city_polygon(self) -> None:
        # Test case 1: Valid city name
        delft_polygon = Polygon(
            [
                [4.397030128008521, 51.978974022008849],
                [4.385915732402142, 52.004835254703522],
                [4.38865568316005, 52.005493542374488],
                [4.388115393311687, 52.006769689674329],
                [4.388452408089886, 52.007417868938511],
                [4.38831371926249, 52.007670713484529],
                [4.389025257275456, 52.007830852850795],
                [4.388497771871238, 52.008666833281829],
                [4.388849442418155, 52.008766454563968],
                [4.388345522418386, 52.009447641539843],
                [4.392946257452544, 52.010689744533984],
                [4.394515940388187, 52.011255646728266],
                [4.389300928287476, 52.018967752873181],
                [4.387866966914839, 52.021382801816777],
                [4.386244899521865, 52.023308192077472],
                [4.385300994537969, 52.024035915889684],
                [4.382294034648428, 52.025288095949641],
                [4.380378289410968, 52.0269039169265],
                [4.379808695626586, 52.026663540196623],
                [4.373499186762666, 52.032598808573667],
                [4.359769517835622, 52.026546042311814],
                [4.358848662181385, 52.02733392840657],
                [4.355770832116958, 52.02598842764953],
                [4.355364052740653, 52.025676018864694],
                [4.325956240875358, 52.012793313497532],
                [4.32590484946653, 52.012630224775755],
                [4.326059327720996, 52.01250006646746],
                [4.325321860897413, 52.012199077380686],
                [4.325995389807828, 52.01162105055289],
                [4.3253148134648, 52.011329598959534],
                [4.325470716494122, 52.010869232648233],
                [4.320635737452764, 52.009322032850484],
                [4.321490059568696, 52.008463492923525],
                [4.320217743007207, 52.008065446631377],
                [4.323244422008501, 52.004335613149394],
                [4.32634627081072, 52.005292796402465],
                [4.325759738804321, 52.006017129607301],
                [4.327707519772749, 52.006432371825355],
                [4.328267342041668, 52.005913380758415],
                [4.332655693060217, 52.007882839868245],
                [4.336370855964837, 52.004753181578309],
                [4.338453226481672, 52.005690734450802],
                [4.341142500729023, 52.002710361893357],
                [4.335834291340005, 52.001055314141198],
                [4.337716915505261, 51.998802481792239],
                [4.334722020359042, 51.998335328108759],
                [4.333348316048749, 51.997921234339067],
                [4.333244728653204, 51.998115363787605],
                [4.331525000807767, 51.997852172268423],
                [4.33183656664811, 51.997087915623261],
                [4.333071172652861, 51.995087743860573],
                [4.333109542469005, 51.993171798156609],
                [4.32573234440236, 51.991951225848794],
                [4.324111927380339, 51.989858604114715],
                [4.3265491396628, 51.987348257114718],
                [4.328487650444233, 51.985702018627194],
                [4.330888774593457, 51.984365864879464],
                [4.331855202551149, 51.984489729564281],
                [4.332538146788813, 51.982774106361298],
                [4.332395404640468, 51.981415513202457],
                [4.332723641511646, 51.980456650640441],
                [4.335076432098194, 51.977583311856954],
                [4.338227323364971, 51.974177716235623],
                [4.340598005161602, 51.974968608784707],
                [4.342517851207115, 51.975325676354743],
                [4.34313436971233, 51.975674801608882],
                [4.344257763312574, 51.975309752965856],
                [4.344980236436553, 51.975363985598101],
                [4.356625880980578, 51.977296257425301],
                [4.357392364442688, 51.975464309074667],
                [4.3585716717644, 51.975657899736291],
                [4.35883164470216, 51.975020142650003],
                [4.357647388261395, 51.974824084189244],
                [4.358200050841136, 51.973503340125013],
                [4.359307012748732, 51.973693351556207],
                [4.359368093074425, 51.973549965453088],
                [4.359479001158222, 51.973280389308741],
                [4.358374562074542, 51.973091210485457],
                [4.358556029720975, 51.972675150381988],
                [4.359701042876086, 51.972872942700228],
                [4.359880596225981, 51.972457277384379],
                [4.358720932578607, 51.972260949670392],
                [4.359540231946458, 51.970135397828884],
                [4.368173838796326, 51.97158175963613],
                [4.369175464199911, 51.968870466224416],
                [4.373060048576907, 51.969521337047965],
                [4.373161313667342, 51.969707244462747],
                [4.384844285613258, 51.971752741658435],
                [4.384777325557397, 51.971899892673903],
                [4.386302878384689, 51.972214052128834],
                [4.383622480756819, 51.975815867972855],
                [4.393809811261692, 51.977503476475647],
                [4.394168124624725, 51.976320533242614],
                [4.395088098894416, 51.976438524600191],
                [4.395236940874244, 51.975968489963876],
                [4.396173948718051, 51.976080162559171],
                [4.39674575892132, 51.974180780963586],
                [4.397723043014319, 51.974333652446717],
                [4.399121480312414, 51.970974621014349],
                [4.399466831062806, 51.97049212814057],
                [4.399654604954477, 51.970556626077006],
                [4.402377900898975, 51.967049300684039],
                [4.402864599011636, 51.966671810558431],
                [4.403037936276798, 51.96644983627052],
                [4.402933412547184, 51.966316314442871],
                [4.407910876301395, 51.968198605790896],
                [4.405652477607251, 51.971043573298481],
                [4.40470938465059, 51.971509389583716],
                [4.403389547197087, 51.973132847245544],
                [4.40115232813044, 51.978346002847921],
                [4.398396991345807, 51.978418471764464],
                [4.398141300325072, 51.979149454281888],
                [4.397030128008521, 51.978974022008849],
            ],
        )
        result = city_polygon("delft")
        self.assertIsInstance(result, GeoDataFrame)
        self.assertEqual(result.iloc[0]["geometry"], delft_polygon)

        # Test case2: Valid city name with Capital letters
        result = city_polygon("Delft")
        self.assertIsInstance(result, GeoDataFrame)
        self.assertEqual(result.iloc[0]["geometry"], delft_polygon)

        # Test case 2: Invalid city name
        city_name = "Nonexistent City"
        with self.assertRaises(ValueError):
            city_polygon(city_name)


if __name__ == "__main__":
    unittest.main()
